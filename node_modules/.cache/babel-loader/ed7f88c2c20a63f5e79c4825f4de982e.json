{"ast":null,"code":"import _classCallCheck from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sajid.khan/ReactDemo/My-App/src/Views/UserData.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar TextArea = Input.TextArea,\n    List = Input.List; // const residences = [{\n//   value: 'zhejiang',\n//   label: 'Zhejiang',\n//   children: [{\n//     value: 'hangzhou',\n//     label: 'Hangzhou',\n//     children: [{\n//       value: 'xihu',\n//       label: 'West Lake',\n//     }],\n//   }],\n// }, {\n//   value: 'jiangsu',\n//   label: 'Jiangsu',\n//   children: [{\n//     value: 'nanjing',\n//     label: 'Nanjing',\n//     children: [{\n//       value: 'zhonghuamen',\n//       label: 'Zhong Hua Men',\n//     }],\n//   }],\n// }];\n\nvar UserData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserData, _React$Component);\n\n  function UserData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleWebsiteChange = function (value) {\n      var autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(function (domain) {\n          return \"\".concat(value).concat(domain);\n        });\n      }\n\n      _this.setState({\n        autoCompleteResult: autoCompleteResult\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(UserData, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      var prefixSelector = getFieldDecorator('prefix', {\n        initialValue: '86'\n      })(React.createElement(Select, {\n        style: {\n          width: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"86\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"+86\"), React.createElement(Option, {\n        value: \"87\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"+87\")));\n      var websiteOptions = autoCompleteResult.map(function (website) {\n        return React.createElement(AutoCompleteOption, {\n          key: website,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, website);\n      });\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), getFieldDecorator('email', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, {\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Personal Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), getFieldDecorator('description', {\n        rules: [{\n          required: false,\n          message: 'Please provide your personal description!'\n        }]\n      })(React.createElement(TextArea, {\n        rows: 4,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Country/Region\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), getFieldDecorator('country', {\n        rules: [{\n          required: false,\n          message: 'Please provide your Country !'\n        }]\n      })(React.createElement(Input, {\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n          title: \"What do you want others to call you?\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"question-circle-o\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), getFieldDecorator('nickname', {\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }]\n      })(React.createElement(Input, {\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Habitual Residence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), getFieldDecorator('residence', {\n        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n        rules: [{\n          type: 'array',\n          required: true,\n          message: 'Please select your habitual residence!'\n        }]\n      })(React.createElement(Cascader, {\n        options: residences,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Input, {\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Phone Number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), getFieldDecorator('phone', {\n        rules: [{\n          required: true,\n          message: 'Please input your phone number!'\n        }]\n      })(React.createElement(Input, {\n        readOnly: true,\n        addonBefore: prefixSelector,\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), getFieldDecorator('website', {\n        rules: [{\n          required: true,\n          message: 'Please input website!'\n        }]\n      })(React.createElement(AutoComplete, {\n        dataSource: websiteOptions,\n        onChange: this.handleWebsiteChange,\n        placeholder: \"website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Input, {\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return UserData;\n}(React.Component);\n\nvar user = Form.create({\n  name: 'userdata'\n})(UserData);\nexport default user;","map":{"version":3,"sources":["/Users/sajid.khan/ReactDemo/My-App/src/Views/UserData.js"],"names":["React","Component","axios","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","TextArea","List","UserData","state","confirmDirty","autoCompleteResult","handleConfirmBlur","e","value","target","setState","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","handleSubmit","rules","type","message","required","whitespace","residences","user","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nimport {\n     Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,\n   } from 'antd';\n\n   const { Option } = Select;\n   const AutoCompleteOption = AutoComplete.Option;\n   const { TextArea, List} = Input;\n   // const residences = [{\n   //   value: 'zhejiang',\n   //   label: 'Zhejiang',\n   //   children: [{\n   //     value: 'hangzhou',\n   //     label: 'Hangzhou',\n   //     children: [{\n   //       value: 'xihu',\n   //       label: 'West Lake',\n   //     }],\n   //   }],\n   // }, {\n   //   value: 'jiangsu',\n   //   label: 'Jiangsu',\n   //   children: [{\n   //     value: 'nanjing',\n   //     label: 'Nanjing',\n   //     children: [{\n   //       value: 'zhonghuamen',\n   //       label: 'Zhong Hua Men',\n   //     }],\n   //   }],\n   // }];\n\n   class UserData extends React.Component {\n     state = {\n       confirmDirty: false,\n       autoCompleteResult: [],\n     };\n\n\n    \n     handleConfirmBlur = (e) => {\n       const value = e.target.value;\n       this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n     }\n\n     compareToFirstPassword = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && value !== form.getFieldValue('password')) {\n         callback('Two passwords that you enter is inconsistent!');\n       } else {\n         callback();\n       }\n     }\n\n     validateToNextPassword = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && this.state.confirmDirty) {\n         form.validateFields(['confirm'], { force: true });\n       }\n       callback();\n     }\n\n     handleWebsiteChange = (value) => {\n       let autoCompleteResult;\n       if (!value) {\n         autoCompleteResult = [];\n       } else {\n         autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n       }\n       this.setState({ autoCompleteResult });\n     }\n\n     render() {\n       const { getFieldDecorator } = this.props.form;\n       const { autoCompleteResult } = this.state;\n\n       const formItemLayout = {\n         labelCol: {\n           xs: { span: 24 },\n           sm: { span: 8 },\n         },\n         wrapperCol: {\n           xs: { span: 24 },\n           sm: { span: 16 },\n         },\n       };\n       const tailFormItemLayout = {\n         wrapperCol: {\n           xs: {\n             span: 24,\n             offset: 0,\n           },\n           sm: {\n             span: 16,\n             offset: 8,\n           },\n         },\n       };\n       const prefixSelector = getFieldDecorator('prefix', {\n         initialValue: '86',\n       })(\n         <Select style={{ width: 70 }}>\n           <Option value=\"86\">+86</Option>\n           <Option value=\"87\">+87</Option>\n         </Select>\n       );\n\n       const websiteOptions = autoCompleteResult.map(website => (\n         <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n       ));\n\n       return (\n         <Form onSubmit={this.handleSubmit}>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Email\"\n           >\n             {getFieldDecorator('email', {\n               rules: [{\n                 type: 'email', message: 'The input is not valid E-mail!',\n               }, {\n                 required: true, message: 'Please input your E-mail!',\n               }],\n             })(\n               <Input readOnly/>\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Personal Description\"\n           >\n           {getFieldDecorator('description', {\n             rules: [{\n               required: false, message: 'Please provide your personal description!',\n             }],\n           })(\n             <TextArea rows={4} readOnly/>\n           )\n\n         }\n\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Country/Region\"\n           >\n           {getFieldDecorator('country', {\n             rules: [{\n               required: false, message: 'Please provide your Country !',\n             }],\n           })(\n             <Input readOnly/>\n           )\n\n         }\n\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label={(\n               <span>\n                 Nickname&nbsp;\n                 <Tooltip title=\"What do you want others to call you?\">\n                   <Icon type=\"question-circle-o\" />\n                 </Tooltip>\n               </span>\n             )}\n           >\n             {getFieldDecorator('nickname', {\n               rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n             })(\n               <Input readOnly/>\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Habitual Residence\"\n           >\n             {getFieldDecorator('residence', {\n               initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n               rules: [{ type: 'array', required: true, message: 'Please select your habitual residence!' }],\n             })(\n\n               <Cascader options={residences} readOnly >\n                  <Input readOnly/>\n                </Cascader>\n\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Phone Number\"\n           >\n             {getFieldDecorator('phone', {\n               rules: [{ required: true, message: 'Please input your phone number!' }],\n             })(\n               <Input readOnly addonBefore={prefixSelector} style={{ width: '100%' }} />\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Website\"\n           >\n             {getFieldDecorator('website', {\n               rules: [{ required: true, message: 'Please input website!' }],\n             })(\n               <AutoComplete\n                 dataSource={websiteOptions}\n                 onChange={this.handleWebsiteChange}\n                 placeholder=\"website\"\n               >\n                 <Input readOnly/>\n               </AutoComplete>\n             )}\n           </Form.Item>\n         </Form>\n\n       );\n     }\n   }\n\n   const user = Form.create({ name: 'userdata' })(UserData);\n\n   export default user;\n"]},"metadata":{},"sourceType":"module"}