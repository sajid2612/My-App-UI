{"ast":null,"code":"import _objectSpread from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sajid.khan/ReactDemo/My-App/src/Views/PasswordRecovery.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Form, Modal, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar TextArea = Input.TextArea,\n    List = Input.List;\n\nvar RecoverPassword =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RecoverPassword, _React$Component);\n\n  function RecoverPassword() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RecoverPassword);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RecoverPassword)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      email: \"sak@gmail.com\",\n      user: {},\n      autoCompleteResult: []\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Passwords that you entered is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirmpassword'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.recoverPassword = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          var valuesFormatted = _objectSpread({}, values, {\n            'password': values['password'],\n            'confirmpassword': values['confirmpassword']\n          });\n\n          if (valuesFormatted.password = valuesFormatted.confirmpassword) {\n            var modalSuccess1 = Modal.success();\n            modalSuccess1.update({\n              title: 'Password Reset',\n              content: 'Password reset successfully'\n            });\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RecoverPassword, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      return React.createElement(Form, {\n        onSubmit: this.recoverPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your new password'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        style: {\n          width: '60%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), getFieldDecorator('confirmpassword', {\n        rules: [{\n          required: true,\n          message: 'Please input your new password again'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        style: {\n          width: '60%'\n        },\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Reset Password\")));\n    }\n  }]);\n\n  return RecoverPassword;\n}(React.Component);\n\nvar recoverPassword = Form.create({\n  name: 'recoverPassword'\n})(RecoverPassword);\nexport default recoverPassword;","map":{"version":3,"sources":["/Users/sajid.khan/ReactDemo/My-App/src/Views/PasswordRecovery.js"],"names":["React","Component","axios","Form","Modal","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","TextArea","List","RecoverPassword","state","confirmDirty","email","user","autoCompleteResult","handleConfirmBlur","e","value","target","setState","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","recoverPassword","preventDefault","validateFieldsAndScroll","err","values","valuesFormatted","password","confirmpassword","modalSuccess1","success","update","title","content","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","validator","width","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nimport {\n     Form, Modal,Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,\n   } from 'antd';\n\n   const { Option } = Select;\n   const AutoCompleteOption = AutoComplete.Option;\n   const { TextArea, List} = Input;\n\n   class RecoverPassword extends React.Component {\n     state = {\n       confirmDirty: false,\n       email:\"sak@gmail.com\",\n       user:{},\n       autoCompleteResult: [],\n     };\n\n     handleConfirmBlur = (e) => {\n       const value = e.target.value;\n       this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n     }\n\n     compareToFirstPassword = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && value !== form.getFieldValue('password')) {\n         callback('Passwords that you entered is inconsistent!');\n       } else {\n         callback();\n       }\n     }\n\n     validateToNextPassword = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && this.state.confirmDirty) {\n         form.validateFields(['confirmpassword'], { force: true });\n       }\n       callback();\n     }\n     recoverPassword = (e) => {\n       e.preventDefault();\n       this.props.form.validateFieldsAndScroll((err, values) => {\n         if (!err) {\n           const valuesFormatted = {\n              ...values,\n              'password': values['password'],\n              'confirmpassword':values['confirmpassword'],\n            };\n            if(valuesFormatted.password = valuesFormatted.confirmpassword){\n              const modalSuccess1 = Modal.success();\n              modalSuccess1.update({\n               title: 'Password Reset',\n               content: 'Password reset successfully',\n             });\n            }\n          }\n       });\n     }\n\n\n     render() {\n       const { getFieldDecorator } = this.props.form;\n       const { autoCompleteResult } = this.state;\n       const formItemLayout = {\n         labelCol: {\n           xs: { span: 24 },\n           sm: { span: 8 },\n         },\n         wrapperCol: {\n           xs: { span: 24 },\n           sm: { span: 16 },\n         },\n       };\n\n       const tailFormItemLayout = {\n         wrapperCol: {\n           xs: {\n             span: 24,\n             offset: 0,\n           },\n           sm: {\n             span: 16,\n             offset: 8,\n           },\n         },\n       };\n\n       return (\n         <Form onSubmit={this.recoverPassword}>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Password\">\n             {getFieldDecorator('password', {\n               rules: [\n                 {\n                 required: true, message: 'Please input your new password',\n                },{\n                 validator: this.validateToNextPassword,\n               }]\n             })(\n               <Input style={{ width: '60%' }}/>\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Confirm Password\"\n           >\n           {getFieldDecorator('confirmpassword', {\n             rules: [ {\n               required: true, message: 'Please input your new password again',\n             },{\n               validator: this.compareToFirstPassword,\n             }]\n           })(\n\n            <Input style={{ width: '60%' }} onBlur={this.handleConfirmBlur}/>\n           )}\n         </Form.Item>\n           <Form.Item {...tailFormItemLayout}>\n            <Button  type=\"primary\" htmlType=\"submit\">Reset Password</Button>\n           </Form.Item>\n         </Form>\n\n       );\n     }\n   }\n\n   const recoverPassword = Form.create({ name: 'recoverPassword' })(RecoverPassword);\n\n   export default recoverPassword;\n"]},"metadata":{},"sourceType":"module"}