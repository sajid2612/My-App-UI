{"ast":null,"code":"import _objectSpread from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sajid.khan/ReactDemo/My-App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sajid.khan/ReactDemo/My-App/src/Views/ForgotPassword.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Form, DatePicker, Modal, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar TextArea = Input.TextArea,\n    List = Input.List;\n\nvar ForgotPassword =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ForgotPassword, _React$Component);\n\n  function ForgotPassword() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ForgotPassword);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ForgotPassword)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      email: \"sak@gmail.com\",\n      user: {},\n      autoCompleteResult: []\n    };\n\n    _this.compareToFirstEmail = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('confirmemail')) {\n        callback('Emails  that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextEmail = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.sendLink = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          var valuesFormatted = _objectSpread({}, values, {\n            'email': values['email'],\n            'confirmemail': values['confirmemail']\n          });\n\n          if (valuesFormatted.email != valuesFormatted.confirmemail) {\n            var modalError1 = Modal.warn();\n            modalError1.update({\n              title: 'Email Not Matched',\n              content: 'Email Not Matched'\n            });\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ForgotPassword, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var config = {\n        rules: [{\n          type: 'object',\n          required: true,\n          message: 'Please select birthdate!'\n        }]\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      return React.createElement(Form, {\n        onSubmit: this.sendLink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), getFieldDecorator('email', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, {\n        style: {\n          width: '60%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, formItemLayout, {\n        label: \"Confirm Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), getFieldDecorator('confirmemail', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, {\n        style: {\n          width: '60%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), getFieldDecorator('matchedemail', {\n        rules: [{\n          required: true,\n          message: 'Please match E-mail!'\n        }]\n      })(React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Send Link\"))));\n    }\n  }]);\n\n  return ForgotPassword;\n}(React.Component);\n\nvar forgotPassword = Form.create({\n  name: 'forgot'\n})(ForgotPassword);\nexport default forgotPassword;","map":{"version":3,"sources":["/Users/sajid.khan/ReactDemo/My-App/src/Views/ForgotPassword.js"],"names":["React","Component","axios","Form","DatePicker","Modal","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","TextArea","List","ForgotPassword","state","confirmDirty","email","user","autoCompleteResult","compareToFirstEmail","rule","value","callback","form","props","getFieldValue","validateToNextEmail","validateFields","force","sendLink","e","preventDefault","validateFieldsAndScroll","err","values","valuesFormatted","confirmemail","modalError1","warn","update","title","content","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","config","rules","type","required","message","tailFormItemLayout","offset","width","forgotPassword","create","name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SACKC,IADL,EACUC,UADV,EACsBC,KADtB,EAC4BC,KAD5B,EACmCC,OADnC,EAC4CC,IAD5C,EACkDC,QADlD,EAC4DC,MAD5D,EACoEC,GADpE,EACyEC,GADzE,EAC8EC,QAD9E,EACwFC,MADxF,EACgGC,YADhG,QAEU,MAFV;IAIWC,M,GAAWN,M,CAAXM,M;AACR,IAAMC,kBAAkB,GAAGF,YAAY,CAACC,MAAxC;IACQE,Q,GAAkBZ,K,CAAlBY,Q;IAAUC,I,GAAQb,K,CAARa,I;;IAEZC,c;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,KAAK,EAAC,eAFA;AAGNC,MAAAA,IAAI,EAAC,EAHC;AAINC,MAAAA,kBAAkB,EAAE;AAJd,K;;UAORC,mB,GAAsB,UAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAA2B;AAC/C,UAAMC,IAAI,GAAG,MAAKC,KAAL,CAAWD,IAAxB;;AACA,UAAIF,KAAK,IAAIA,KAAK,KAAKE,IAAI,CAACE,aAAL,CAAmB,cAAnB,CAAvB,EAA2D;AACzDH,QAAAA,QAAQ,CAAC,yCAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ;AACT;AACF,K;;UAEDI,mB,GAAsB,UAACN,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAA2B;AAC/C,UAAMC,IAAI,GAAG,MAAKC,KAAL,CAAWD,IAAxB;;AACA,UAAIF,KAAK,IAAI,MAAKP,KAAL,CAAWC,YAAxB,EAAsC;AACpCQ,QAAAA,IAAI,CAACI,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AACD;;AACDN,MAAAA,QAAQ;AACT,K;;UACDO,Q,GAAW,UAACC,CAAD,EAAO;AAEhBA,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKP,KAAL,CAAWD,IAAX,CAAgBS,uBAAhB,CAAwC,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACvD,YAAI,CAACD,GAAL,EAAU;AACR,cAAME,eAAe,qBACfD,MADe;AAElB,qBAASA,MAAM,CAAC,OAAD,CAFG;AAGlB,4BAAeA,MAAM,CAAC,cAAD;AAHH,YAArB;;AAKC,cAAGC,eAAe,CAACnB,KAAhB,IAAyBmB,eAAe,CAACC,YAA5C,EAAyD;AACvD,gBAAMC,WAAW,GAAGvC,KAAK,CAACwC,IAAN,EAApB;AACAD,YAAAA,WAAW,CAACE,MAAZ,CAAmB;AAClBC,cAAAA,KAAK,EAAE,mBADW;AAElBC,cAAAA,OAAO,EAAE;AAFS,aAAnB;AAID;AACF;AACH,OAfD;AAgBD,K;;;;;;;6BAGQ;AAAA,UACCC,iBADD,GACuB,KAAKlB,KAAL,CAAWD,IADlC,CACCmB,iBADD;AAAA,UAECxB,kBAFD,GAEwB,KAAKJ,KAF7B,CAECI,kBAFD;AAGP,UAAMyB,cAAc,GAAG;AACrBC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,EAAE,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WADI;AAERC,UAAAA,EAAE,EAAE;AAAED,YAAAA,IAAI,EAAE;AAAR;AAFI,SADW;AAKrBE,QAAAA,UAAU,EAAE;AACVH,UAAAA,EAAE,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR,WADM;AAEVC,UAAAA,EAAE,EAAE;AAAED,YAAAA,IAAI,EAAE;AAAR;AAFM;AALS,OAAvB;AAUA,UAAMG,MAAM,GAAG;AACbC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,QAAQ,EAAE,IAA5B;AAAkCC,UAAAA,OAAO,EAAE;AAA3C,SAAD;AADM,OAAf;AAGA,UAAMC,kBAAkB,GAAG;AACzBN,QAAAA,UAAU,EAAE;AACVH,UAAAA,EAAE,EAAE;AACFC,YAAAA,IAAI,EAAE,EADJ;AAEFS,YAAAA,MAAM,EAAE;AAFN,WADM;AAKVR,UAAAA,EAAE,EAAE;AACFD,YAAAA,IAAI,EAAE,EADJ;AAEFS,YAAAA,MAAM,EAAE;AAFN;AALM;AADa,OAA3B;AAaA,aACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAK1B,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,IAAN,oBACMc,cADN;AAEE,QAAA,KAAK,EAAC,OAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGGD,iBAAiB,CAAC,OAAD,EAAU;AAC1BQ,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,IAAI,EAAE,OADA;AACSE,UAAAA,OAAO,EAAE;AADlB,SAAD,EAEJ;AACDD,UAAAA,QAAQ,EAAE,IADT;AACeC,UAAAA,OAAO,EAAE;AADxB,SAFI;AADmB,OAAV,CAAjB,CAOC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPD,CAHH,CADF,EAcE,oBAAC,IAAD,CAAM,IAAN,oBACMb,cADN;AAEE,QAAA,KAAK,EAAC,eAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAICD,iBAAiB,CAAC,cAAD,EAAiB;AACjCQ,QAAAA,KAAK,EAAE,CAAC;AACNC,UAAAA,IAAI,EAAE,OADA;AACSE,UAAAA,OAAO,EAAE;AADlB,SAAD,EAEJ;AACDD,UAAAA,QAAQ,EAAE,IADT;AACeC,UAAAA,OAAO,EAAE;AADxB,SAFI;AAD0B,OAAjB,CAAjB,CAOA,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPA,CAJD,CAdF,EA4BE,oBAAC,IAAD,CAAM,IAAN,oBAAeF,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACCZ,iBAAiB,CAAC,cAAD,EAAiB;AACjCQ,QAAAA,KAAK,EAAE,CAAC;AACNE,UAAAA,QAAQ,EAAE,IADJ;AACUC,UAAAA,OAAO,EAAE;AADnB,SAAD;AAD0B,OAAjB,CAAjB,CAKC,oBAAC,MAAD;AAAS,QAAA,IAAI,EAAC,SAAd;AAAwB,QAAA,QAAQ,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALD,CADD,CA5BF,CADF;AA0CD;;;;EArH0B5D,KAAK,CAACC,S;;AAwHnC,IAAM+D,cAAc,GAAG7D,IAAI,CAAC8D,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAAgC9C,cAAhC,CAAvB;AAEA,eAAe4C,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nimport {\n     Form,DatePicker, Modal,Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete,\n   } from 'antd';\n\n   const { Option } = Select;\n   const AutoCompleteOption = AutoComplete.Option;\n   const { TextArea, List} = Input;\n\n   class ForgotPassword extends React.Component {\n     state = {\n       confirmDirty: false,\n       email:\"sak@gmail.com\",\n       user:{},\n       autoCompleteResult: [],\n     };\n\n     compareToFirstEmail = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && value !== form.getFieldValue('confirmemail')) {\n         callback('Emails  that you enter is inconsistent!');\n       } else {\n         callback();\n       }\n     }\n\n     validateToNextEmail = (rule, value, callback) => {\n       const form = this.props.form;\n       if (value && this.state.confirmDirty) {\n         form.validateFields(['confirm'], { force: true });\n       }\n       callback();\n     }\n     sendLink = (e) => {\n\n       e.preventDefault();\n       this.props.form.validateFieldsAndScroll((err, values) => {\n         if (!err) {\n           const valuesFormatted = {\n              ...values,\n              'email': values['email'],\n              'confirmemail':values['confirmemail'],\n            };\n            if(valuesFormatted.email != valuesFormatted.confirmemail){\n              const modalError1 = Modal.warn();\n              modalError1.update({\n               title: 'Email Not Matched',\n               content: 'Email Not Matched',\n             });\n            }\n          }\n       });\n     }\n\n\n     render() {\n       const { getFieldDecorator } = this.props.form;\n       const { autoCompleteResult } = this.state;\n       const formItemLayout = {\n         labelCol: {\n           xs: { span: 24 },\n           sm: { span: 8 },\n         },\n         wrapperCol: {\n           xs: { span: 24 },\n           sm: { span: 16 },\n         },\n       };\n       const config = {\n         rules: [{ type: 'object', required: true, message: 'Please select birthdate!' }],\n       };\n       const tailFormItemLayout = {\n         wrapperCol: {\n           xs: {\n             span: 24,\n             offset: 0,\n           },\n           sm: {\n             span: 16,\n             offset: 8,\n           },\n         },\n       };\n\n       return (\n         <Form onSubmit={this.sendLink}>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Email\">\n             {getFieldDecorator('email', {\n               rules: [{\n                 type: 'email', message: 'The input is not valid E-mail!',\n               }, {\n                 required: true, message: 'Please input your E-mail!',\n               }]\n             })(\n               <Input style={{ width: '60%' }}/>\n             )}\n           </Form.Item>\n           <Form.Item\n             {...formItemLayout}\n             label=\"Confirm Email\"\n           >\n           {getFieldDecorator('confirmemail', {\n             rules: [{\n               type: 'email', message: 'The input is not valid E-mail!',\n             }, {\n               required: true, message: 'Please input your E-mail!',\n             }]\n           })(\n            <Input style={{ width: '60%' }}/>\n           )}\n         </Form.Item>\n           <Form.Item {...tailFormItemLayout}>\n           {getFieldDecorator('matchedemail', {\n             rules: [{\n               required: true, message: 'Please match E-mail!',\n             }]\n           })(\n             <Button  type=\"primary\" htmlType=\"submit\">Send Link</Button>\n           )}\n\n           </Form.Item>\n         </Form>\n\n       );\n     }\n   }\n\n   const forgotPassword = Form.create({ name: 'forgot' })(ForgotPassword);\n\n   export default forgotPassword;\n"]},"metadata":{},"sourceType":"module"}